/*
 * (C) Copyright 2020 Radix DLT Ltd
 *
 * Radix DLT Ltd licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except in
 * compliance with the License.  You may obtain a copy of the
 * License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied.  See the License for the specific
 * language governing permissions and limitations under the License.
 */

plugins {
    id 'maven-publish'
    id 'com.adarshr.test-logger' version '2.1.0'
    id 'org.sonarqube' version '2.7.1'
    id 'com.palantir.git-version' version '0.12.3'
}

repositories {
    jcenter()
    maven { url "https://plugins.gradle.org/m2/" }
    mavenCentral()
    // maven { url 'https://maven.pkg.github.com/radixdlt/maven-packages' }
    maven { url 'https://jitpack.io' }
}

def radixVersion() {
    def details = versionDetails()
    def version
    if (details.isCleanTag) {
        version = details.lastTag
    } else {
        version = details.branchName
        if (version == null) {
            version = "detached-head-${details.gitHash}"
        } else {
            version = version.replaceAll('/', '~')
        }
        version = "${version}-SNAPSHOT"
    }
    return version
}

group 'com.radixdlt'
version radixVersion()

apply plugin: 'java-library'
apply plugin: 'jacoco'
apply plugin: 'checkstyle'
apply plugin: 'org.sonarqube'
apply plugin: 'com.adarshr.test-logger'

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integrationTest/java')
        }
        resources.srcDir file('src/integrationTest/resources')
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

compileJava {
    options.release = 11
    options.compilerArgs += '-proc:none'
}

compileTestJava {
    options.compilerArgs += '-proc:none'
}

compileIntegrationTestJava {
    options.compilerArgs += '-proc:none'
}
 
checkstyle {
    toolVersion '8.10.1'
    showViolations = true
}

checkstyleMain {
    configFile project.file('config/checkstyle/checkstyle.xml')
}

checkstyleTest {
    // Largely the same as the main file, but extended snake case allowed
    configFile project.file('config/checkstyle/checkstyle_test.xml')
}

checkstyleIntegrationTest {
    // Largely the same as the main file, but extended snake case allowed
    configFile project.file('config/checkstyle/checkstyle_test.xml')
}

test {
    systemProperty "java.security.egd", "file:/dev/urandom"
}

task integrationTest(type: Test) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
}

integrationTest.mustRunAfter test

jacoco {
    toolVersion = "0.8.5"
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
    }
}

configurations.all {
    resolutionStrategy.eachDependency {
        if(it.requested.name == 'guava') {
            it.useTarget 'com.google.guava:guava:29.0-jre'
        }
        if(it.requested.name == 'json') {
            it.useTarget 'org.json:json:20180813'
        }
    }
}

dependencies {
    compile 'com.github.radixdlt:radixdlt-java-common:1.0-beta.10'

    testCompile('org.objenesis:objenesis:3.1') { force = true }
    testCompile('org.javassist:javassist:3.27.0-GA') { force = true }
    testCompile('net.bytebuddy:byte-buddy:1.10.13') { force = true }
    testCompile('net.bytebuddy:byte-buddy-agent:1.10.13') { force = true }
    testCompile 'org.powermock:powermock-module-junit4:2.0.7'
    testCompile 'org.powermock:powermock-api-mockito2:2.0.7'
    testCompile 'nl.jqno.equalsverifier:equalsverifier:3.4.2'
    testCompile 'org.hamcrest:hamcrest-library:1.3'
    testCompile 'org.assertj:assertj-core:3.11.1'
    testCompile('com.flipkart.zjsonpatch:zjsonpatch:0.4.5') {
        exclude group: 'com.fasterxml.jackson.core', module: 'jackson-core'
        exclude group: 'com.fasterxml.jackson.core', module: 'jackson-databind'
    }
}

publishing {
    repositories {
        maven {
            name = 'GitHubPackages'
            url = uri('https://maven.pkg.github.com/radixdlt/maven-packages')
            credentials {
                username = project.findProperty('gpr.user') ?: System.getenv('GPR_USER')
                password = project.findProperty('gpr.key') ?: System.getenv('GPR_TOKEN')
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            from(components.java)
        }
    }
}
