name: radixdlt-keygen-publish-docker
on:
  #  create:
  #    branches:
  #      - release\/*
  push:
    branches:
      - rc\/*
      - release\/*
      - ci/node-keygen-artifact
jobs:
  #  cancel_running_workflows:
  #    if: ${{ startsWith(github.ref, 'refs/heads/release/') ||  startsWith(github.ref, 'refs/heads/rc') }}
  #    name: Cancel running workflows
  #    runs-on: ubuntu-20.04
  #    steps:
  #      - name: cancel running workflows
  #        uses: styfle/cancel-workflow-action@0.8.0
  #        with:
  #          access_token: ${{ github.token }}
  build:
    #    if: ${{ startsWith(github.ref, 'refs/heads/release/') ||  startsWith(github.ref, 'refs/heads/rc') }}
    runs-on: ubuntu-latest
    name: Build JARs
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up JDK 1.11
        uses: actions/setup-java@v1
        with:
          java-version: 1.11
      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Build radixdlt
        run: |
          if [[ "$GITHUB_REF" == *"refs/heads/release"* ]]; then
              echo "Workflow triggered by on a release branch"
          else
            echo "Workflow triggered by on a rc branch"
            export CI_VERSION=true
          fi
          version=$(./gradlew radixCiVersion | grep radixdlt-version | cut -d: -f2)
          echo "Version: $version"
          ./gradlew clean build -x test
      - name: Archive radixdlt-core build distributions
        uses: actions/upload-artifact@v2
        with:
          name: build-distribution
          path: |
            radixdlt-core/radixdlt/build/distributions
            retention-days: 1
      - name: Archive radixdlt-core build libraries
        uses: actions/upload-artifact@v2
        with:
          name: build-libraries
          path: |
            radixdlt-core/radixdlt/build/libs
            retention-days: 1
      - name: Cleanup Gradle Cache
        # Remove some files from the Gradle cache, so they aren't cached by GitHub Actions.
        # Restoring these files from a GitHub Actions cache might cause problems for future builds.
        run: |
          rm -f ~/.gradle/caches/modules-2/modules-2.lock
          rm -f ~/.gradle/caches/modules-2/gc.properties

  publish-keygen-docker:
    needs: build
    name: Publish keygen to dockerhub
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up JDK 1.11
        uses: actions/setup-java@v1
        with:
          java-version: 1.11
      - name: Download distribution artifact
        uses: actions/download-artifact@v2
        with:
          name: build-distribution
      - name: Download build artifact
        uses: actions/download-artifact@v2
        with:
          name: build-libraries
      - name: Prepare Dockerfile
        run: |
          if [[ "$GITHUB_REF" == *"refs/heads/release"* ]]; then
              echo "Workflow triggered by on a release branch"
          else
            echo "Workflow triggered by on a rc branch"
            export CI_VERSION=true
          fi
          version=$(./gradlew radixCiVersion | grep radixdlt-version | cut -d: -f2)
          echo "Version: $version"
          echo "RADIXDLT_CORE_VERSION_RAW=$version" >> $GITHUB_ENV
          unzip radixdlt-core/radixdlt/build/distributions/radixdlt-${version}.zip
          cd radixdlt-${version}

          cat <<EOT >> Dockerfile
          FROM adoptopenjdk/openjdk11:latest
          RUN mkdir -p /keygen/bin keygen/lib

          ADD bin/ /keygen/bin
          ADD lib/ /keygen/lib
          WORKDIR /keygen/

          ENTRYPOINT ["bin/keygen"]
          EOT
          echo "generated Dockerfile"
          cat Dockerfile

      - name: Set Environment Variables
        run: |
          if [[ "$GITHUB_REF" == *"refs/heads/release"* ]]; then
           echo "Workflow triggered by on a release branch"
#            echo "DOCKER_CREDS=${{ secrets.GCR_EU_DEV_JSON_KEY }}" >> $GITHUB_ENV
          else
            echo "Workflow triggered by on a rc branch"
#            echo "DOCKER_CREDS=${{ secrets.GCR_EU_DEV_JSON_KEY }}" >> $GITHUB_ENV
            echo "IMAGE=eu.gcr.io/dev-container-repo/keygen" >> $GITHUB_ENV
            export CI_VERSION=true
          fi
          echo "Version: $RADIXDLT_CORE_VERSION_RAW"
          TAG=$(echo $RADIXDLT_CORE_VERSION_RAW | sed 's/~/-/g')
          echo "TAG $TAG"
          echo "RADIXDLT_CORE_VERSION=$TAG" >> $GITHUB_ENV
          echo "PUBLISH=true" >> $GITHUB_ENV
      - name: Login to Dockerhub
        uses: docker/login-action@v1
        with:
          registry: eu.gcr.io
          username: _json_key
          password: ${{ secrets.GCR_EU_DEV_JSON_KEY }}
      - name: Docker build and push
        uses: docker/build-push-action@v2
        with:
          file: ./radixdlt-${ env.RADIXDLT_CORE_VERSION_RAW }}/Dockerfile
          tags: |
            ${{ env.IMAGE }}:${{ env.RADIXDLT_CORE_VERSION }}
          push: ${{ env.PUBLISH }}
          context: ./radixdlt-${{ env.RADIXDLT_CORE_VERSION_RAW }}/
      - name: Cleanup Gradle Cache
        # Remove some files from the Gradle cache, so they aren't cached by GitHub Actions.
        # Restoring these files from a GitHub Actions cache might cause problems for future builds.
        run: |
          rm -f ~/.gradle/caches/modules-2/modules-2.lock
          rm -f ~/.gradle/caches/modules-2/gc.properties
