/*
 * (C) Copyright 2020 Radix DLT Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the “Software”),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

plugins {
    id 'maven-publish'
    id 'com.adarshr.test-logger' version '2.1.0'
    id 'org.sonarqube' version '2.7.1'
    id 'net.nemerosa.versioning' version '2.14.0'
    id 'com.palantir.git-version' version '0.12.3'
}

repositories {
    jcenter()
}

def radixVersion() {
    def details = versionDetails()
    def version
    if (details.isCleanTag) {
        version = details.lastTag
    } else {
        version = details.branchName
        if (version == null) {
            version = "detached-head-${details.gitHash}"
        } else {
            version = version.replaceAll('/', '~')
        }
        version = "${version}-SNAPSHOT"
    }
    return version
}

group 'com.radixdlt'
version radixVersion()

allprojects {
    version = rootProject.version

    configurations.all {
        resolutionStrategy {
            // fail eagerly on version conflict (includes transitive dependencies)
            // e.g. multiple different versions of the same dependency (group and name are equal)
            failOnVersionConflict()
        }
    }

    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:all" << "-Werror"
            options.compilerArgs << "-Xlint:-processing"    // Not really a useful warning
            options.compilerArgs << "-Xlint:-serial"        // Not using Java serialization
        }
    }

    apply plugin: 'java'
}

subprojects {
    compileJava {
        options.release = 11
    }
}